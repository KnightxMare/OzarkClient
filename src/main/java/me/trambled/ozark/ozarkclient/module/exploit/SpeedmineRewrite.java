package me.trambled.ozark.ozarkclient.module.exploit;

import me.trambled.ozark.mixins.AccessorPlayerControllerMP;
import me.trambled.ozark.ozarkclient.event.events.EventClickBlock;
import me.trambled.ozark.ozarkclient.event.events.EventPacket;
import me.trambled.ozark.ozarkclient.module.Category;
import me.trambled.ozark.ozarkclient.module.Module;
import me.trambled.ozark.ozarkclient.module.render.ChorusViewer;
import me.trambled.ozark.ozarkclient.util.TickRateUtil;
import me.trambled.ozark.ozarkclient.util.TimerUtil;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.renderer.RenderGlobal;
import net.minecraft.entity.Entity;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;;import java.awt.*;

public class SpeedmineRewrite extends Module {

    public SpeedmineRewrite() {
        super(Category.EXPLOIT);

        this.name        = "SpeedMineRewrite";
        this.tag         = "SpeedMineRewrite";
        this.description = "Speedmine but now render because trambled cant add render to the old speedmine. so kambing did it. (by skidding ofc)";
    }
    private final TimerUtil renderTimer = new TimerUtil();
    private BlockPos currentPos = null;

    @Override
    public void render() {
        if (currentPos != null && mc.world.getBlockState(currentPos).getBlock() == Blocks.AIR) {
            currentPos = null;
        }

        if (this.currentPos != null) {
            drawOutline(currentPos, renderTimer.passed((long) (2000 * (20 / TickRateUtil.TPS))) ? Color.GREEN : Color.RED);
        }
    }

    @SubscribeEvent
    public void onClickBlock(EventClickBlock event) {
        if (event.isDamage()) {
            if (((AccessorPlayerControllerMP) mc.playerController).getCurBlockDamageMP() > 0.1f) {
                ((AccessorPlayerControllerMP) mc.playerController).setIsHittingBlock(true);
            }
        } else if (canBreak(event.getPos())) {
            ((AccessorPlayerControllerMP) mc.playerController).setIsHittingBlock(false);
            if (this.currentPos == null) {
                this.currentPos = event.getPos();
                this.renderTimer.reset();
            }
            mc.player.swingArm(EnumHand.MAIN_HAND);
            mc.getConnection().sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.START_DESTROY_BLOCK, event.getPos(), event.getSide()));
            mc.getConnection().sendPacket(new CPacketPlayerDigging(CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK, event.getPos(), event.getSide()));
            currentPos = event.getPos();
            event.setCanceled(true);
        }
    }

    private static void drawOutline(BlockPos pos, Color color) {
        final IBlockState iblockstate = mc.world.getBlockState(pos);
        final Entity entity = mc.getRenderViewEntity();
        final double x = entity.lastTickPosX + (entity.posX - entity.lastTickPosX) * mc.getRenderPartialTicks();
        final double y = entity.lastTickPosY + (entity.posY - entity.lastTickPosY) * mc.getRenderPartialTicks();
        final double z = entity.lastTickPosZ + (entity.posZ - entity.lastTickPosZ) * mc.getRenderPartialTicks();
        if (iblockstate.getMaterial() != Material.AIR) {
            ChorusViewer.enableGL3D();
            AxisAlignedBB bb = iblockstate.getSelectedBoundingBox(mc.world, pos).grow(0.0020000000949949026D).offset(-x, -y, -z);
            RenderGlobal.drawSelectionBoundingBox(iblockstate.getSelectedBoundingBox(mc.world, pos).grow(0.0020000000949949026D).offset(-x, -y, -z), color.getRed() / 255F, color.getGreen() / 255F, color.getBlue() / 255F, 1F);
            RenderGlobal.renderFilledBox(bb.minX, bb.minY, bb.minZ, bb.maxX, bb.maxY, bb.maxZ, color.getRed() / 255F, color.getGreen() / 255F, color.getBlue() / 255F, 40 / 255F);
            ChorusViewer.disableGL3D();
        }
    }

    public boolean canBreak(BlockPos pos) {
        final Block block = mc.world.getBlockState(pos).getBlock();
        return block.getBlockHardness(mc.world.getBlockState(pos), mc.world, pos) != -1;
    }
}