package me.trambled.ozark.ozarkclient.module.exploit;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import me.trambled.ozark.Ozark;
import me.trambled.ozark.ozarkclient.util.EntityUtil;
import me.trambled.ozark.ozarkclient.util.PlayerUtil;
import net.minecraft.block.state.IBlockState;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketHeldItemChange;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.*;
import net.minecraft.entity.item.EntityItem;
import net.minecraft.entity.Entity;
import me.trambled.ozark.ozarkclient.module.Setting;
import me.trambled.ozark.ozarkclient.module.Module;
import me.trambled.ozark.ozarkclient.module.Category;
import net.minecraft.util.EnumHand;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketPlayer;
import me.trambled.ozark.ozarkclient.manager.ModuleManager;
import net.minecraft.block.BlockEnderChest;
import net.minecraft.block.BlockSand;
import me.trambled.ozark.ozarkclient.util.BlockInteractionHelper;
import net.minecraft.block.BlockChest;
import net.minecraft.init.Blocks;
import net.minecraft.item.ItemStack;
import net.minecraft.item.ItemBlock;
import net.minecraft.block.Block;
import net.minecraft.item.Item;

import static me.trambled.ozark.ozarkclient.util.WrapperUtil.mc;

public class BurrowBypass extends Module {
    private BlockPos originalPos;
    private int oldSlot;
    private int itemSwitch;
    Setting mode;
    Setting rotate;
    Setting packet;
    Setting offset;
//listedhack :troll:
    public BurrowBypass() {
        super(Category.EXPLOIT);
        this.oldSlot = -1;
        this.itemSwitch = 0;
        this.mode = this.create("Mode", "Mode", "Chest", this.combobox("Chest", "Sand", "Echest"));
        this.rotate = this.create("Rotate", "Rotate", false);
        this.packet = this.create("Packet", "Packet", true);
        this.offset = this.create("Offset", "Offset", 2.0, -20.0, 20.0);
        this.name = "Burrow Bypass";
        this.tag = "BurrowBypass";
        this.description = "burrow on strict servers";
    }

    public void enable() {
        if (mc.player == null || mc.world == null) {
            return;
        }
        this.originalPos = PlayerUtil.GetLocalPlayerPosFloored();
        if (BurrowBypass.mc.world.getBlockState(new BlockPos(BurrowBypass.mc.player.posX, BurrowBypass.mc.player.posY, BurrowBypass.mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) || this.intersectsWithEntity(this.originalPos)) {
            this.toggle();
        }
    }

    @Override
    public void update() {
        if (this.mode.in("Chest") && this.findHotbarBlock(BlockChest.class) == -1) {
            this.toggle();
        }
        if (this.mode.in("Sand") && this.findHotbarBlock(BlockSand.class) == -1) {
            this.toggle();
        }
        if (this.mode.in("Echest") && this.findHotbarBlock(BlockEnderChest.class) == -1) {
            this.toggle();
        }
        final int oldSlot = BurrowBypass.mc.player.inventory.currentItem;
        if (this.mode.in("Chest")) {
            this.switchToSlot(this.findHotbarBlock(BlockChest.class));
        }
        if (this.mode.in("Sand")) {
            this.switchToSlot(this.findHotbarBlock(BlockSand.class));
        }
        if (this.mode.in("Echest")) {
            this.switchToSlot(this.findHotbarBlock(BlockEnderChest.class));
        }
        BurrowBypass.mc.player.connection.sendPacket((Packet) new CPacketPlayer.Position(BurrowBypass.mc.player.posX, BurrowBypass.mc.player.posY + 0.41999998688698, BurrowBypass.mc.player.posZ, true));
        BurrowBypass.mc.player.connection.sendPacket((Packet) new CPacketPlayer.Position(BurrowBypass.mc.player.posX, BurrowBypass.mc.player.posY + 0.7531999805211997, BurrowBypass.mc.player.posZ, true));
        BurrowBypass.mc.player.connection.sendPacket((Packet) new CPacketPlayer.Position(BurrowBypass.mc.player.posX, BurrowBypass.mc.player.posY + 1.00133597911214, BurrowBypass.mc.player.posZ, true));
        BurrowBypass.mc.player.connection.sendPacket((Packet) new CPacketPlayer.Position(BurrowBypass.mc.player.posX, BurrowBypass.mc.player.posY + 1.16610926093821, BurrowBypass.mc.player.posZ, true));
        this.placeBlock(this.originalPos, EnumHand.MAIN_HAND, this.rotate.get_value(true), this.packet.get_value(true), false);
        BurrowBypass.mc.player.connection.sendPacket((Packet) new CPacketPlayer.Position(BurrowBypass.mc.player.posX, BurrowBypass.mc.player.posY + this.offset.get_value(1), BurrowBypass.mc.player.posZ, false));
        this.switchToSlot(oldSlot);
        this.toggle();
    }

    private boolean intersectsWithEntity(final BlockPos pos) {
        for (final Entity entity : BurrowBypass.mc.world.loadedEntityList) {
            if (entity.equals((Object) BurrowBypass.mc.player)) {
                continue;
            }
            if (entity instanceof EntityItem) {
                continue;
            }
            if (new AxisAlignedBB(pos).intersects(entity.getEntityBoundingBox())) {
                return true;
            }
        }
        return false;
    }

    public static int findFirst(final Class<? extends Item> clazz) {
        int b = -1;
        for (int a = 0; a < 9; ++a) {
            if (mc.player.inventory.getStackInSlot(a).getItem().getClass().equals(clazz)) {
                b = a;
                break;
            }
        }
        return b;
    }

    public static int find(final Class<? extends Item> clazz) {
        int b = -1;
        for (int a = 0; a < 9; ++a) {
            if (mc.player.inventory.getStackInSlot(a).getItem().getClass().equals(clazz)) {
                b = a;
            }
        }
        return b;
    }

    public static int findFirst(final Item item) {
        int b = -1;
        for (int a = 0; a < 9; ++a) {
            if (mc.player.inventory.getStackInSlot(a).getItem() == item) {
                b = a;
                break;
            }
        }
        return b;
    }

    public static int find(final Item item) {
        int b = -1;
        for (int a = 0; a < 9; ++a) {
            if (mc.player.inventory.getStackInSlot(a).getItem() == item) {
                b = a;
            }
        }
        return b;
    }

    public static boolean switchTo(final Item item) {
        final int a = find(item);
        if (a == -1) {
            return false;
        }
        mc.player.inventory.currentItem = a;
        mc.playerController.updateController();
        return true;
    }

    public static int getBlockInHotbar(final Block block) {
        for (int i = 0; i < 9; ++i) {
            final Item item = mc.player.inventory.getStackInSlot(i).getItem();
            if (item instanceof ItemBlock && ((ItemBlock) item).getBlock().equals(block)) {
                return i;
            }
        }
        return -1;
    }





    public static int findHotbarBlock(final Class clazz) {
        for (int i = 0; i < 9; ++i) {
            final ItemStack stack = mc.player.inventory.getStackInSlot(i);
            if (stack != ItemStack.EMPTY) {
                if (clazz.isInstance(stack.getItem())) {
                    return i;
                }
                if (stack.getItem() instanceof ItemBlock) {
                    final Block block = ((ItemBlock) stack.getItem()).getBlock();
                    if (clazz.isInstance(block)) {
                        return i;
                    }
                }
            }
        }
        return -1;
    }

    public static void switchToSlot(final int slot) {
        if (slot != -1 && mc.player.inventory.currentItem != slot) {
            mc.player.inventory.currentItem = slot;
            mc.playerController.updateController();
        }
    }
    public static boolean placeBlock(final BlockPos pos, final EnumHand hand, final boolean rotate, final boolean packet, final boolean isSneaking) {
        boolean sneaking = false;
        final EnumFacing side = getFirstFacing(pos);
        if (side == null) {
            return isSneaking;
        }
        final BlockPos neighbour = pos.offset(side);
        final EnumFacing opposite = side.getOpposite();
        final Vec3d hitVec = new Vec3d((Vec3i)neighbour).add(0.5, 0.5, 0.5).add(new Vec3d(opposite.getDirectionVec()).scale(0.5));
        final Block neighbourBlock =mc.world.getBlockState(neighbour).getBlock();
        if (!mc.player.isSneaking()) {
            mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)mc.player, CPacketEntityAction.Action.START_SNEAKING));
            mc.player.setSneaking(true);
            sneaking = true;
        }
        if (rotate) {
            faceVector(hitVec, true);
        }
        rightClickBlock(neighbour, hitVec, hand, opposite, packet);
        mc.player.swingArm(EnumHand.MAIN_HAND);
        mc.rightClickDelayTimer = 4;
        return sneaking || isSneaking;
    }

    public static List<EnumFacing> getPossibleSides(final BlockPos pos) {
        final List<EnumFacing> facings = new ArrayList<EnumFacing>();
        for (final EnumFacing side : EnumFacing.values()) {
            final BlockPos neighbour = pos.offset(side);
            if (mc.world.getBlockState(neighbour).getBlock().canCollideCheck(mc.world.getBlockState(neighbour), false)) {
                final IBlockState blockState = mc.world.getBlockState(neighbour);
                if (!blockState.getMaterial().isReplaceable()) {
                    facings.add(side);
                }
            }
        }
        return facings;
    }

    public static EnumFacing getFirstFacing(final BlockPos pos) {
        final Iterator<EnumFacing> iterator = getPossibleSides(pos).iterator();
        if (iterator.hasNext()) {
            final EnumFacing facing = iterator.next();
            return facing;
        }
        return null;
    }

    public static Vec3d getEyesPos() {
        return new Vec3d(mc.player.posX, mc.player.posY + mc.player.getEyeHeight(), mc.player.posZ);
    }

    public static float[] getLegitRotations(final Vec3d vec) {
        final Vec3d eyesPos = getEyesPos();
        final double diffX = vec.x - eyesPos.x;
        final double diffY = vec.y - eyesPos.y;
        final double diffZ = vec.z - eyesPos.z;
        final double diffXZ = Math.sqrt(diffX * diffX + diffZ * diffZ);
        final float yaw = (float)Math.toDegrees(Math.atan2(diffZ, diffX)) - 90.0f;
        final float pitch = (float)(-Math.toDegrees(Math.atan2(diffY, diffXZ)));
        return new float[] { mc.player.rotationYaw + MathHelper.wrapDegrees(yaw - mc.player.rotationYaw), mc.player.rotationPitch + MathHelper.wrapDegrees(pitch - mc.player.rotationPitch) };
    }

    public static void faceVector(final Vec3d vec, final boolean normalizeAngle) {
        final float[] rotations = getLegitRotations(vec);
        mc.player.connection.sendPacket((Packet)new CPacketPlayer.Rotation(rotations[0], normalizeAngle ? ((float) MathHelper.normalizeAngle((int)rotations[1], 360)) : rotations[1], mc.player.onGround));
    }

    public static void rightClickBlock(final BlockPos pos, final Vec3d vec, final EnumHand hand, final EnumFacing direction, final boolean packet) {
        if (packet) {
            final float f = (float)(vec.x - pos.getX());
            final float f2 = (float)(vec.y - pos.getY());
            final float f3 = (float)(vec.z - pos.getZ());
            mc.player.connection.sendPacket((Packet)new CPacketPlayerTryUseItemOnBlock(pos, direction, hand, f, f2, f3));
        }
        else {
            mc.playerController.processRightClickBlock(mc.player, mc.world, pos, direction, vec, hand);
        }
        mc.player.swingArm(EnumHand.MAIN_HAND);
        mc.rightClickDelayTimer = 4;
    }


    }









