package me.travis.wurstplus.wurstplustwo.hacks.exploit;

import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;
import me.travis.wurstplus.wurstplustwo.util.WurstplusMessageUtil;

import com.mojang.realmsclient.gui.ChatFormatting;
import net.minecraft.entity.Entity;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.network.play.server.SPacketDestroyEntities;
import net.minecraft.network.play.server.SPacketMoveVehicle;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.network.play.server.SPacketSetPassengers;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.event.entity.EntityJoinWorldEvent;
import net.minecraftforge.event.world.ChunkEvent;
import net.minecraftforge.event.world.WorldEvent;

import java.util.Random;

import me.travis.wurstplus.wurstplustwo.event.events.EventNetworkPacketEvent;
import me.travis.wurstplus.wurstplustwo.event.events.EventPlayerUpdate;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;

public class EntityDesync extends WurstplusHack
{
    private Entity Riding = null;
	
	public EntityDesync() {
	    super(WurstplusCategory.WURSTPLUS_EXPLOIT);

        this.name = "Entity Desync";
        this.tag = "EntityDesync";
        this.description = "useful for dupes";
	}
	
    @Override
    protected void enable()
    {

        if (mc.player == null)
        {
            Riding = null;
            toggle();
            return;
        }

        if (!mc.player.isRiding())
        {
            WurstplusMessageUtil.send_client_message(ChatFormatting.RED + "[Entity Desync] You are not riding an entity.");
            Riding = null;
            toggle();
            return;
        }

        Riding = mc.player.getRidingEntity();

        mc.player.dismountRidingEntity();
        mc.world.removeEntity(Riding);
    }

    @Override
    protected void disable()
    {
        
        if (Riding != null)
        {
            Riding.isDead = false;
            if (!mc.player.isRiding())
            {
                mc.world.spawnEntity(Riding);
                mc.player.startRiding(Riding, true);
            }
            Riding = null;
            WurstplusMessageUtil.send_client_message(ChatFormatting.RED + "[Entity Desync] Forced a remount.");
        }
    }

    @EventHandler
    private Listener<EventPlayerUpdate> OnUpdate = new Listener<>(p_Event ->
    {
        /// We must be riding to send these packets.
        if (Riding == null)
            return;

        if (mc.player.isRiding())
            return;
        
        mc.player.onGround = true;
        
        Riding.setPosition(mc.player.posX, mc.player.posY, mc.player.posZ);
        
        mc.player.connection.sendPacket(new CPacketVehicleMove(Riding));
    });
    
    @EventHandler
    private Listener<EventNetworkPacketEvent> PacketEvent = new Listener<>(p_Event ->
    {
        if (p_Event.getPacket() instanceof SPacketSetPassengers)
        {
            if (Riding == null)
                return;
            
            SPacketSetPassengers l_Packet = (SPacketSetPassengers) p_Event.getPacket();
            
            Entity en = mc.world.getEntityByID(l_Packet.getEntityId());
            
            if (en == Riding)
            {
                for (int i : l_Packet.getPassengerIds())
                {
                    Entity ent = mc.world.getEntityByID(i);
                    
                    if (ent == mc.player)
                        return;
                }
                
                WurstplusMessageUtil.send_client_message("ChatFormatting.RED + [Entity Desync] You dismounted. RIP");
                toggle();
            }
        }
        else if (p_Event.getPacket() instanceof SPacketDestroyEntities)
        {
            SPacketDestroyEntities l_Packet = (SPacketDestroyEntities) p_Event.getPacket();

            for (int l_EntityId : l_Packet.getEntityIDs())
            {
                if (l_EntityId == Riding.getEntityId())
                {
                    WurstplusMessageUtil.send_client_message("ChatFormatting.RED + [Entity Desync] Entity is now null SPacketDestroyEntities");
                  //  toggle();
                    return;
                }
            }
        }
    });
    
    @EventHandler
    private Listener<EntityJoinWorldEvent> OnWorldEvent = new Listener<>(p_Event ->
    {
        if (p_Event.getEntity() == mc.player)
        {
            WurstplusMessageUtil.send_client_message("[Entity Desync] Joined world event!");
        }
    });
}
